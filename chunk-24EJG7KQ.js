import{a as R}from"./chunk-LIZM4CZI.js";import{A as d}from"./chunk-Z5YYMG7R.js";import{V as p,aa as m,fa as c,o as i}from"./chunk-ME5BD2TS.js";import{e as t}from"./chunk-JKOY2XUY.js";var u=class a{http=c(d);config=c(R);getApiUrl(e){return this.config.getApiUrl(`/admin/roles${e}`)}createPermission(e){return this.http.post(this.getApiUrl("/permissions"),e)}createPermissionAsync(e){return t(this,null,function*(){let s=yield i(this.createPermission(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to create permission");return s.data})}getAllPermissions(e){let s={};return e?.module&&(s.module=e.module),e?.action&&(s.action=e.action),e?.is_active!==void 0&&(s.is_active=e.is_active.toString()),e?.search&&(s.search=e.search),this.http.get(this.getApiUrl("/permissions"),{params:s})}getAllPermissionsAsync(e){return t(this,null,function*(){let s=yield i(this.getAllPermissions(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to fetch permissions");return s.data})}getPermissionById(e){return this.http.get(this.getApiUrl(`/permissions/${e}`))}getPermissionByIdAsync(e){return t(this,null,function*(){let s=yield i(this.getPermissionById(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to fetch permission");return s.data})}updatePermission(e,s){return this.http.put(this.getApiUrl(`/permissions/${e}`),s)}updatePermissionAsync(e,s){return t(this,null,function*(){let r=yield i(this.updatePermission(e,s));if(!r.success||!r.data)throw new Error(r.error||"Failed to update permission");return r.data})}deletePermission(e){return this.http.delete(this.getApiUrl(`/permissions/${e}`))}deletePermissionAsync(e){return t(this,null,function*(){yield i(this.deletePermission(e))})}createRole(e){return this.http.post(this.getApiUrl(""),e)}createRoleAsync(e){return t(this,null,function*(){let s=yield i(this.createRole(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to create role");return s.data})}getAllRoles(e){let s={};return e?.is_active!==void 0&&(s.is_active=e.is_active.toString()),e?.is_system_role!==void 0&&(s.is_system_role=e.is_system_role.toString()),e?.search&&(s.search=e.search),this.http.get(this.getApiUrl(""),{params:s})}getAllRolesAsync(e){return t(this,null,function*(){let s=yield i(this.getAllRoles(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to fetch roles");return s.data})}getRoleById(e){return this.http.get(this.getApiUrl(`/${e}`))}getRoleByIdAsync(e){return t(this,null,function*(){let s=yield i(this.getRoleById(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to fetch role");return s.data})}updateRole(e,s){return this.http.put(this.getApiUrl(`/${e}`),s)}updateRoleAsync(e,s){return t(this,null,function*(){let r=yield i(this.updateRole(e,s));if(!r.success||!r.data)throw new Error(r.error||"Failed to update role");return r.data})}deleteRole(e){return console.log("Deleting role via API:",this.getApiUrl(`/${e}`)),this.http.delete(this.getApiUrl(`/${e}`))}deleteRoleAsync(e){return t(this,null,function*(){try{console.log("Attempting to delete role:",e);let s=yield i(this.deleteRole(e));console.log("Delete role result:",s)}catch(s){throw console.error("Delete role failed:",s),s}})}getRoleUsers(e){return this.http.get(this.getApiUrl(`/${e}/users`))}getRoleUsersAsync(e){return t(this,null,function*(){let s=yield i(this.getRoleUsers(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to fetch role users");return s.data})}assignRole(e){return this.http.post(this.getApiUrl("/assign"),e)}assignRoleAsync(e){return t(this,null,function*(){let s=yield i(this.assignRole(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to assign role");return s.data})}removeRole(e,s){return this.http.delete(this.getApiUrl(`/users/${e}/roles/${s}`))}removeRoleAsync(e,s){return t(this,null,function*(){yield i(this.removeRole(e,s))})}getUserRoles(e){return this.http.get(this.getApiUrl(`/users/${e}/roles`))}getUserRolesAsync(e){return t(this,null,function*(){let s=yield i(this.getUserRoles(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to fetch user roles");return s.data})}getUserPermissions(e){return this.http.get(this.getApiUrl(`/users/${e}/permissions`))}getUserPermissionsAsync(e){return t(this,null,function*(){let s=yield i(this.getUserPermissions(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to fetch user permissions");return s.data})}addPermissionsToRole(e,s){return this.getRoleById(e).pipe(p(r=>{if(!r.success||!r.data)throw new Error("Failed to get role");let n=r.data,g=Array.isArray(n.permissions)?n.permissions.map(o=>typeof o=="string"?o:o._id):[],l=[...new Set([...g,...s])];return this.updateRole(e,{permissions:l})}))}addPermissionsToRoleAsync(e,s){return t(this,null,function*(){let r=yield i(this.addPermissionsToRole(e,s));if(!r.success||!r.data)throw new Error(r.error||"Failed to add permissions to role");return r.data})}removePermissionsFromRole(e,s){return this.getRoleById(e).pipe(p(r=>{if(!r.success||!r.data)throw new Error("Failed to get role");let n=r.data,l=(Array.isArray(n.permissions)?n.permissions.map(o=>typeof o=="string"?o:o._id):[]).filter(o=>!s.includes(o));return this.updateRole(e,{permissions:l})}))}removePermissionsFromRoleAsync(e,s){return t(this,null,function*(){let r=yield i(this.removePermissionsFromRole(e,s));if(!r.success||!r.data)throw new Error(r.error||"Failed to remove permissions from role");return r.data})}setRolePermissions(e,s){return this.updateRole(e,{permissions:s})}setRolePermissionsAsync(e,s){return t(this,null,function*(){let r=yield i(this.setRolePermissions(e,s));if(!r.success||!r.data)throw new Error(r.error||"Failed to set role permissions");return r.data})}getRoleWithDetails(e){return this.getRoleById(e)}getRoleWithDetailsAsync(e){return t(this,null,function*(){let s=yield i(this.getRoleWithDetails(e));if(!s.success||!s.data)throw new Error(s.error||"Failed to get role details");return s.data})}initializeSystem(){return this.http.post(this.getApiUrl("/initialize"),{})}initializeSystemAsync(){return t(this,null,function*(){let e=yield i(this.initializeSystem());if(!e.success)throw new Error(e.error||"Failed to initialize system")})}makeSuperAdmin(e){return this.http.post(this.getApiUrl("/make-super-admin"),{userId:e})}makeSuperAdminAsync(e){return t(this,null,function*(){let s=yield i(this.makeSuperAdmin(e));if(!s.success)throw new Error(s.error||"Failed to make user super admin")})}static \u0275fac=function(s){return new(s||a)};static \u0275prov=m({token:a,factory:a.\u0275fac,providedIn:"root"})};export{u as a};

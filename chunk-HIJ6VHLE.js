import{a as h}from"./chunk-ZSXFIASO.js";import{B as g}from"./chunk-KJIZDUX4.js";import{$ as P,Ea as u,Oc as t,fa as d,g as m,q as c}from"./chunk-OEBJLLDW.js";import{e as l}from"./chunk-JKOY2XUY.js";var E=class a{http=d(g);config=d(h);userPermissionsSubject=new m(null);loadingSubject=new m(!1);userPermissions=u(null);isLoading=u(!1);allPermissions=t(()=>this.userPermissions()?.allPermissions||[]);permissionNames=t(()=>this.allPermissions().map(s=>s.name));activeRoles=t(()=>{let s=this.userPermissions();return s?s.roles.filter(e=>e.is_active?e.expires_at?new Date(e.expires_at)>new Date:!0:!1):[]});userPermissions$=this.userPermissionsSubject.asObservable();isLoading$=this.loadingSubject.asObservable();constructor(){this.userPermissionsSubject.subscribe(s=>{this.userPermissions.set(s),this.persistPermissions(s)}),this.loadingSubject.subscribe(s=>{this.isLoading.set(s)}),this.restorePermissions()}getApiUrl(s){return this.config.getApiUrl(`/admin/roles${s}`)}loadUserPermissions(s){return l(this,null,function*(){try{this.loadingSubject.next(!0),console.log("Loading permissions for user:",s);try{let[e,i]=yield Promise.all([this.http.get(this.getApiUrl(`/users/${s}/roles`)).toPromise(),this.http.get(this.getApiUrl(`/users/${s}/permissions`)).toPromise()]);if(e?.success&&i?.success){let r={userId:s,roles:e.data.map(o=>({_id:o.role_id._id||o.role_id,name:o.role_id.name||"unknown",display_name:o.role_id.display_name,permissions:o.role_id.permissions||[],is_active:o.is_active,expires_at:o.expires_at})),directPermissions:[],allPermissions:i.data};console.log("Loaded user permissions from admin API:",r),this.userPermissionsSubject.next(r);return}}catch(e){if(console.warn("Failed to load from admin API (likely permission issue):",e.status),e.status===403){console.log("User does not have admin access, creating basic permissions structure");let i={userId:s,roles:[],directPermissions:[],allPermissions:[]};console.log("Created basic permissions for non-admin user:",i),this.userPermissionsSubject.next(i);return}throw e}console.error("Admin API returned invalid responses"),this.userPermissionsSubject.next(null)}catch(e){console.error("Error loading user permissions:",e),this.userPermissionsSubject.next(null)}finally{this.loadingSubject.next(!1)}})}hasPermission(s){return this.permissionNames().includes(s)}hasAnyPermission(s){let e=this.permissionNames();return s.some(i=>e.includes(i))}hasAllPermissions(s){let e=this.permissionNames();return s.every(i=>e.includes(i))}hasRole(s){return this.activeRoles().some(i=>i.name===s||i.display_name===s)}hasAnyRole(s){let e=this.activeRoles();return s.some(i=>e.some(r=>r.name===i||r.display_name===i))}checkPermissions(s){return s.every(e=>{if(typeof e.permission=="string")return this.hasPermission(e.permission);let i=Array.isArray(e.permission)?e.permission:[e.permission];return e.requireAll?this.hasAllPermissions(i):this.hasAnyPermission(i)})}canAccess(s,e){let i=e?`${s}.${e}`:s;return this.hasPermission(i)}hasPermission$(s){return this.userPermissions$.pipe(c(e=>e?e.allPermissions.some(i=>i.name===s):!1))}hasRole$(s){return this.userPermissions$.pipe(c(e=>e?e.roles.some(i=>(i.name===s||i.display_name===s)&&i.is_active&&(!i.expires_at||new Date(i.expires_at)>new Date)):!1))}getPermissionsByCategory(){let s=this.allPermissions(),e={};return s.forEach(i=>{let r=i.category||"General";e[r]||(e[r]=[]),e[r].push(i)}),e}persistPermissions(s){if(!(typeof window>"u"||!localStorage))try{s?(localStorage.setItem("userPermissions",JSON.stringify(s)),localStorage.setItem("permissionsTimestamp",Date.now().toString()),console.log("Permissions persisted to localStorage")):(localStorage.removeItem("userPermissions"),localStorage.removeItem("permissionsTimestamp"),console.log("Permissions cleared from localStorage"))}catch(e){console.warn("Failed to persist permissions to localStorage:",e)}}restorePermissions(){if(!(typeof window>"u"||!localStorage))try{let s=localStorage.getItem("userPermissions"),e=localStorage.getItem("permissionsTimestamp");if(s&&e){let i=Date.now()-parseInt(e),r=24*60*60*1e3;if(i<r){let o=JSON.parse(s);console.log("Restored permissions from localStorage:",o),this.userPermissionsSubject.next(o);return}else console.log("Stored permissions are too old, clearing them"),this.clearStoredPermissions()}else console.log("No stored permissions found in localStorage")}catch(s){console.warn("Failed to restore permissions from localStorage:",s),this.clearStoredPermissions()}}clearStoredPermissions(){localStorage.removeItem("userPermissions"),localStorage.removeItem("permissionsTimestamp")}clearPermissions(){this.userPermissionsSubject.next(null),this.clearStoredPermissions()}refreshPermissions(s){return l(this,null,function*(){yield this.loadUserPermissions(s)})}hasAdminAccess=t(()=>{let s=this.permissionNames(),e=this.activeRoles(),i=["super_admin","admin","system_admin","moderator"],r=e.some(n=>i.includes(n.name.toLowerCase())||i.includes(n.display_name?.toLowerCase()||"")),p=["dashboard.read","users.read","users.create","users.update","users.delete","roles.read","roles.create","roles.update","roles.delete","businesses.approve","businesses.suspend","analytics.read"].some(n=>s.includes(n)),S=r||p;return console.log("Admin access check:",{permissions:s.length,roles:e.map(n=>n.name),hasAdminRole:r,hasAdminPermission:p,hasAccess:S}),S});static PERMISSIONS={USERS_VIEW:"users.read",USERS_CREATE:"users.create",USERS_EDIT:"users.update",USERS_DELETE:"users.delete",USERS_SUSPEND:"users.suspend",ROLES_VIEW:"roles.read",ROLES_CREATE:"roles.create",ROLES_EDIT:"roles.update",ROLES_DELETE:"roles.delete",ROLES_ASSIGN:"roles.assign",BUSINESS_VIEW:"businesses.read",BUSINESS_CREATE:"businesses.create",BUSINESS_EDIT:"businesses.update",BUSINESS_DELETE:"businesses.delete",BUSINESS_APPROVE:"businesses.approve",BUSINESS_REJECT:"businesses.reject",BUSINESS_SUSPEND:"businesses.suspend",ADMIN_ACCESS:"dashboard.read",ADMIN_DASHBOARD:"dashboard.read",ANALYTICS_VIEW:"analytics.read",BUSINESS_MANAGE:"businesses.update",PERMISSIONS_VIEW:"roles.read",PERMISSIONS_CREATE:"roles.create",PERMISSIONS_EDIT:"roles.update",PERMISSIONS_DELETE:"roles.delete"};static ROLES={SUPER_ADMIN:"super_admin",ADMIN:"admin",MODERATOR:"moderator",USER:"user",BUSINESS_OWNER:"business_owner",BUSINESS_MANAGER:"business_manager"};static \u0275fac=function(e){return new(e||a)};static \u0275prov=P({token:a,factory:a.\u0275fac,providedIn:"root"})};export{E as a};
